DELIMITER $$
--
-- Functions
--
CREATE FUNCTION `nextval`(`seq_name` VARCHAR(100)) RETURNS bigint(20)
BEGIN
    DECLARE cur_val bigint(20);
    SELECT
        sequence_cur_value INTO cur_val
    FROM
        sequence_data
    WHERE
        sequence_name = seq_name
    ;
     IF cur_val IS NOT NULL THEN
        UPDATE
            sequence_data
        SET
            sequence_cur_value = IF (
                (sequence_cur_value + sequence_increment) > sequence_max_value,
                IF (
                    sequence_cycle = TRUE,
                    sequence_min_value,
                    NULL
                ),
                sequence_cur_value + sequence_increment
            )
        WHERE
            sequence_name = seq_name
        ;
    END IF;

    RETURN cur_val;
    
     END$$

DELIMITER ;

--
-- Table structure for table `sequence_data`
--
CREATE TABLE IF NOT EXISTS `sequence_data` (
  `sequence_name` varchar(100) NOT NULL,
  `sequence_increment` int(11) unsigned NOT NULL DEFAULT '1',
  `sequence_min_value` int(11) unsigned NOT NULL DEFAULT '1',
  `sequence_max_value` bigint(20) unsigned NOT NULL DEFAULT '99999',
  `sequence_cur_value` bigint(20) unsigned DEFAULT '1',
  `sequence_cycle` tinyint(1) NOT NULL DEFAULT '1'
);

--
-- Dumping data for table `sequence_data`
--
INSERT INTO `sequence_data` (`sequence_name`, `sequence_increment`, `sequence_min_value`, `sequence_max_value`, `sequence_cur_value`, `sequence_cycle`) VALUES
('vf_tfa_email_otp', 1, 1, 99999, 1, 1);





---------------------------------------------------------------------postgres-------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS sequence_data (
  sequence_name varchar(100) NOT NULL,
  sequence_increment integer NOT NULL DEFAULT '1',
  sequence_min_value integer NOT NULL DEFAULT '1',
  sequence_max_value bigint NOT NULL DEFAULT '99999',
  sequence_cur_value bigint DEFAULT '1',
  sequence_cycle integer NOT NULL DEFAULT '1'
);

INSERT INTO sequence_data (sequence_name, sequence_increment, sequence_min_value, sequence_max_value, sequence_cur_value, sequence_cycle) VALUES
('vf_tfa_email_otp', 1, 1, 99999, 1, 1);



CREATE OR REPLACE FUNCTION nextval(seq_name VARCHAR(100)) RETURNS bigint
AS $$

    DECLARE cur_val bigint;
BEGIN
    SELECT
        sequence_cur_value INTO cur_val
    FROM
        sequence_data
    WHERE
        sequence_name = seq_name
    ;
     IF cur_val IS NOT NULL THEN
        UPDATE
            sequence_data
        SET
            sequence_cur_value = CASE WHEN  
                (sequence_cur_value + sequence_increment) > sequence_max_value THEN 
                CASE WHEN  
                    sequence_cycle = TRUE THEN 
                    sequence_min_value ELSE 
                    NULL
                 END ELSE 
                sequence_cur_value + sequence_increment
             END
        WHERE
            sequence_name = seq_name ;
    END IF;

    RETURN cur_val;
    
     END;

$$ LANGUAGE plpgsql;

